User Stories für Taschenrechner

User Story Vorlage: Als <Rolle/Anwendertyp> möchte ich <Ziel/Wunsch/Funktion>, um <Nutzen>

Titel: Beenden
Story: Als Benutzer möchte ich "Fertig" anstelle einer weitere Zahl eingeben, um den Taschenrechner zu beenden
Akzeptanzkriterien:
	* Taschenrechner wird beendet, sobald "Fertig" (in dieser schreibweise) eingegeben wird
	* Es gibt einen entsprechenden Hinweis, dass der Benutzer weiss mit welchem Kommando er den Taschenrechner beenden kann
Status:
	* Offen

************************************
Titel: Validieren der Eingabe
Story: Als Benutzer möchte ich sofort erkennen ob meine Eingabe richtig ist, um den Taschenrechner schnell und einfach bedienen zu können
		
Akzeptanzkriterien:
	* Eine fehlerhafte Eingabe wird nach betätigen von Return sofort angezeigtn
	* Der Benutzer bekommt Hinweise wie er Zahlen, Operationen und Kommandos richtig eingeben kann
Status:
•	Offen
*	

************************************
Titel: Fortlaufende Berechnung
Story: Als Benutzer möchte ich eine weitere Zahl eingeben, um die vorherige Operation nochmals auszuführen
		mit dem vorherigen Resultat
Akzeptanzkriterien:
	* Gleitkommazahlen zwischen -10.0 und 100.0 können eingegeben werden
	* Die Operation aus der vorherigen Berechnung wird nochmals verwendet
	* Das neue Resultat wird ausgegeben ohne weitere Interaktion mit dem Benutzer wieder verwendet
Status:
•	Umgesetzt
*	Erledigt

************************************
Titel: ObjektOrientierung
Story: Als Entwickler möchte ich die Anwendung objektorientiert entwickeln, um später einfach weitere
		Funktionalitäten hinzufügen zu können.
Akzeptanzkriterien:
	* Die Aufteilung der Funktionalitäten in Klassen folgt dem Prinzip Separation of Concerns (SoC).
	* Bei der Erstellung von Klassen und Methoden wird das Prinzip Don't Repeat Yourself (DRY)
Hinweis: 
	* Diese Story ist eine Erweiterung zu Story "Softwarestruktur""
Status:
	* Offen

************************************

Titel: Softwarestruktur
Story: Als Entwickler möchte ich den Quellcode auber strukturieren, um später einfach weitere
		Funktionalitäten hinzufügen zu können.
Akzeptanzkriterien:
	* Das Single Level of Abstraction Prinzip wird eingehalten, oder eine Abweichung ist 
		begründet und dokumentiert.
Status:
•	Umgesetzt
*	Erledigt

************************************

Titel: Subtrahieren
Story: Als Benutzer möchte ich zwei Zahlen eingeben, um deren Differenz berechnen zu lassen.
Akzeptanzkriterien:
	* Gleitkommazahlen zwischen -10.0 und 100.0 können subtrahiert werden
Status:
•	Implementiert
•	Getestet
•	Erledigt

*************************************
Titel: Multiplizieren und Dividieren
Story: Als Benutzer möchte ich zwei Zahlen eingeben, um deren Differenz berechnen zu lassen.
Akzeptanzkriterien:
	* Zahlen zwischen -10.0 und 100.0 können multipliziert oder dividiert werden
Status:
•	Implementiert
•	Getestet
•	Erledigt

*************************************

Titel: Addieren
Story: Als Benutzer möchte ich zwei Zahlen eingeben, um deren Summe berechnen zu lassen
Akzeptanzkriterien:
	* Gleitkommazahlen zwischen -10.0 und 100.0 können addiert werden
Status:
•	Implementiert
•	Getestet
•	Erledigt


***************************************




Titel: Starten
Story: Als Benutzer möchte ich den Taschenrechner schnell aufrufen können, um mein Resultat schnell zu bekommen.
Akzeptanzkriterien:
	* Die Anwendung wird innerhalb von 2 Sekunden auf dem Rechner gestartet
	* Die Anwendung läuft auf einem Rechner mit Windows 10.

